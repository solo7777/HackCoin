<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HackCoin Interface</title>
  <script src="https://cdn.jsdelivr.net/npm/ethers/dist/ethers.min.js"></script>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    input { margin-right: 10px; }
    button { margin: 5px 0; }
    .section { margin-top: 20px; }
  </style>
</head>
<body>
  <h1>HackCoin Interaction</h1>

  <button onclick="connectWallet()">🔗 Connect Wallet</button>
  <p id="status"></p>

  <div class="section">
    <input id="mintAmount" type="number" placeholder="Amount to mint" />
    <button onclick="mint()">🪙 Mint</button>
  </div>

  <div class="section">
    <input id="burnAmount" type="number" placeholder="Amount to burn" />
    <button onclick="burn()">🔥 Burn</button>
  </div>

  <div class="section">
    <button onclick="checkBalance()">📊 Check Balance</button>
    <p id="balance"></p>
  </div>

  <div class="section">
    <button onclick="getOwner()">👑 Get Owner</button>
    <p id="owner"></p>
  </div>

  <script>
    const contractAddress = "0x1Fa5036a3df254Ead1A5930BD208Ac760b1C2010";
    const contractABI = [
      {
        "inputs": [
          { "internalType": "address", "name": "to", "type": "address" },
          { "internalType": "uint256", "name": "amount", "type": "uint256" }
        ],
        "name": "mint",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "value", "type": "uint256" }
        ],
        "name": "burn",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          { "internalType": "address", "name": "", "type": "address" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "account", "type": "address" }
        ],
        "name": "balanceOf",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ];

    let signer;
    let contract;

    async function connectWallet() {
      if (window.ethereum) {
        try {
          await ethereum.request({ method: "eth_requestAccounts" });
          const provider = new ethers.providers.Web3Provider(window.ethereum);
          signer = provider.getSigner();
          contract = new ethers.Contract(contractAddress, contractABI, signer);
          document.getElementById("status").innerText = "✅ Wallet connected.";
        } catch (err) {
          document.getElementById("status").innerText = `❌ ${err.message}`;
        }
      } else {
        alert("Install MetaMask!");
      }
    }

    async function mint() {
      const amount = document.getElementById("mintAmount").value;
      if (!contract) return alert("Connect wallet first.");
      try {
        const tx = await contract.mint(await signer.getAddress(), ethers.utils.parseUnits(amount, 18));
        await tx.wait();
        document.getElementById("status").innerText = `✅ Minted ${amount} HackCoin.`;
      } catch (err) {
        document.getElementById("status").innerText = `❌ ${err.message}`;
      }
    }

    async function burn() {
      const amount = document.getElementById("burnAmount").value;
      if (!contract) return alert("Connect wallet first.");
      try {
        const tx = await contract.burn(ethers.utils.parseUnits(amount, 18));
        await tx.wait();
        document.getElementById("status").innerText = `🔥 Burned ${amount} HackCoin.`;
      } catch (err) {
        document.getElementById("status").innerText = `❌ ${err.message}`;
      }
    }

    async function checkBalance() {
      if (!contract) return alert("Connect wallet first.");
      try {
        const address = await signer.getAddress();
        const balance = await contract.balanceOf(address);
        document.getElementById("balance").innerText = `💰 Balance: ${ethers.utils.formatUnits(balance, 18)} HACK`;
      } catch (err) {
        document.getElementById("balance").innerText = `❌ ${err.message}`;
      }
    }

    async function getOwner() {
      if (!contract) return alert("Connect wallet first.");
      try {
        const owner = await contract.owner();
        document.getElementById("owner").innerText = `👑 Owner: ${owner}`;
      } catch (err) {
        document.getElementById("owner").innerText = `❌ ${err.message}`;
      }
    }
  </script>
</body>
</html>
