// SPDX-License-Identifier: MIT // Temporary change to update commit history
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract HackCoin is ERC20, ERC20Burnable, ERC20Votes, ERC20Permit, Ownable {
    uint256 private constant _CAP = 100_000_000 * 10**18;

    constructor(address initialOwner)
        ERC20("HackCoin", "HACK")
        ERC20Permit("HackCoin")
        Ownable(initialOwner)
    {
        _mint(initialOwner, 10_000_000 * 10**18);
    }
    
    // Перевизначаємо функцію nonces.
    // Оскільки HackCoin успадковує ERC20Permit, який має свою реалізацію nonces,
    // ми просто викликаємо реалізацію базового класу.
    function nonces(address owner) public view override(ERC20Permit, Nonces) returns (uint256) {
        return super.nonces(owner);
    }

    function mint(address to, uint256 amount) public onlyOwner {
        require(totalSupply() + amount <= _CAP, "Exceeds supply cap");
        _mint(to, amount);
    }
    
    function _update(address from, address to, uint256 amount)
        internal
        override(ERC20, ERC20Votes) // Прибрали ERC20Permit з override
    {
        super._update(from, to, amount);
    }
}
